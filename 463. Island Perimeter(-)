class Solution {
    int[][] size, visited;
    int[][] arr = {{0,1}, {1,0}};
    int max = 0;
    public int islandPerimeter(int[][] grid) {
        if(grid.length == 0)    return 0;

        size = new int[grid.length][grid[0].length];
        visited = new int[grid.length][grid[0].length];
        for(int i = 0 ; i < grid.length ; i++){
            Arrays.fill(size[i], -1);
            Arrays.fill(visited[i], 0);
        }
        
        for(int i = 0 ; i < grid.length ; i++){
            for(int j = 0 ; j < grid[0].length ; j++){
                if(grid[i][j] == 1){
                    if(size[i][j] == -1)    size[i][j] = 4;

                    for(int k = 0 ; k < 2 ; k++){
                        int x = i + arr[k][0];
                        int y = j + arr[k][1];
                        if(x < grid.length &&
                           y < grid[0].length &&
                           grid[x][y] == 1
                          ){
                            size[i][j]--;
                            size[x][y] = size[x][y] == -1 ? 3 : size[x][y]-1;
                            //islandPerimeterHelper(grid, x + arr[i][0], y + arr[i][1], size[x][y]);

                        }

                    }
                }
            }
        }
            
        for(int i = 0 ; i < grid.length ; i++){
            for(int j = 0 ; j < grid[0].length ; j++){
                if(grid[i][j] == 1)    max += size[i][j];
                
            }
        }
        
        return max;
        
    }
    
}