class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (mid != 0 && mid != nums.size() - 1) {
                if (nums[mid - 1] == nums[mid]) {
                    if (mid % 2 == 0) {
                        right = mid - 2;
                    }
                    else {
                        left = mid + 1;
                    }
                }
                else if (nums[mid] == nums[mid + 1]) {
                    if (mid % 2 == 0) {
                        left = mid + 2;
                    }
                    else {
                        right = mid - 1;
                    }
                }
                else {
                    return nums[mid];
                }
            }
            else if (mid == 0) {
                if (nums[0] == nums[1]) {
                    left = 2;
                }
                else {
                    return nums[0];
                }
            }
            else if (mid == nums.size() - 1) {
                if (nums[nums.size() - 2] == nums[nums.size() - 1]) {
                    right = nums.size() - 3;
                }
                else {
                    return nums[nums.size() - 1];
                }
            }
        }
    }
};