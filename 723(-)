class Solution {
public:
    vector<vector<int>> candyCrush(vector<vector<int>>& board) {
        int row_num = board.size(), col_num = board[0].size();
        while (true) {
            // step 1: mark the elements that will be crashed
            bool changed = false;
            for (int r = 0; r < row_num; ++r) {
                for (int c = 0; c < col_num; ++c) {
                    if (mark(board, r, c)) {
                        changed = true;
                    }
                }
            }
            // step 2: crash elements
            if (changed) {
                for (int c = 0; c < col_num; ++c) {
                    vector<int> positives;
                    for (int r = 0; r < row_num; ++r) {
                        if (board[r][c] > 0) {
                            positives.push_back(board[r][c]);
                        }
                    }
                    int size = positives.size();
                    for (int r = 0; r < row_num - size; ++r) {
                        board[r][c] = 0;
                    }
                    for (int r = row_num - size; r < row_num; ++r) {
                        board[r][c] = positives[r - row_num + size];
                    }
                }
            }
            else {
                break;
            }
        }
        return board;
    }
private:
    bool mark(vector<vector<int>> &board, int row, int col) {
        int row_num = board.size(), col_num = board[0].size();
        if (row < 0 || row >= row_num || col < 0 || col >= col_num || board[row][col] <= 0) {
            return false;
        }
        int num = board[row][col];
        int left = col, right = col, up = row, down = row;
        while (left - 1 >= 0 && abs(board[row][left - 1]) == num) {
            --left;
        }
        while (right + 1 < col_num && abs(board[row][right + 1]) == num) {
            ++right;
        }
        if (right - left + 1 >= 3) {
            board[row][col] = -board[row][col];
            return true;
        }
        while (up - 1 >= 0 && abs(board[up - 1][col]) == num) {
            --up;
        }
        while (down + 1 < row_num && abs(board[down + 1][col]) == num) {
            ++down;
        }
        if (down - up + 1 >= 3) {
            board[row][col] = -board[row][col];
            return true;
        }
        return false;
    }
};

