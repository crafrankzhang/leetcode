class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if (inorder.empty() || postorder.empty())
            return NULL;
        int root_index = postorder.size()-1;
        return createBST(inorder,postorder,0,root_index,root_index);
    }
    TreeNode* createBST(vector<int>& inorder, vector<int>& postorder, int start, int end, int& index) {
        int v = postorder[index];
        int i = end;
        for (i; i >= start; i--)
            if (inorder[i] == v)
                break;
        TreeNode* root = new TreeNode(v);
        if (end >= i+1)
            root->right = createBST(inorder,postorder,i+1,end,--index);
        if (i-1 >= start)
            root->left = createBST(inorder,postorder,start,i-1,--index);

        return root;
    }
};