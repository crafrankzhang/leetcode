class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        if (matrix.length == 0) return new ArrayList<Integer>();
        
        ArrayList<Integer> spiral = new ArrayList<>();
       spiral(matrix, 0, 0, matrix.length - 1, matrix[0].length - 1, spiral);
        return spiral; 

    }
    
    public void spiral(int[][] matrix, int i, int j, int cornerX, int cornerY, ArrayList<Integer> spiral){ 
        
        if (i > cornerX || j > cornerY) return;
         
        moveRight(matrix, i, j, cornerX, cornerY, spiral);
         moveDown(matrix, i + 1, cornerY, cornerX, cornerY, spiral);
         if (cornerX != i && cornerY != j){
             moveLeft(matrix, cornerX, cornerY - 1, i, j, spiral);
             moveUp(matrix, cornerX - 1, j, i + 1, j, spiral);
         }
             
        spiral(matrix, i + 1, j  + 1, cornerX - 1, cornerY - 1, spiral);
 
    }
    
    public int moveRight(int[][] matrix, int i, int j, int cornerX, int cornerY, ArrayList<Integer> spiral){ 
        if (i > cornerX || j > cornerY){  
            return j -1;
        } 
        
         spiral.add(matrix[i][j]);

        return moveRight(matrix, i, j + 1, cornerX, cornerY, spiral);

    } 
    
      public int moveDown(int[][] matrix, int i, int j, int cornerX, int cornerY, ArrayList<Integer> spiral){ 
        if (i > cornerX || j > cornerY){ 
            return j ;
        }  
          
         spiral.add(matrix[i][j]);
        return moveDown(matrix, i + 1, j, cornerX, cornerY, spiral);

    } 
    
       public int moveLeft(int[][] matrix, int i, int j, int cornerX, int cornerY, ArrayList<Integer> spiral){ 
        if (i < cornerX || j < cornerY){ 
            return j ;
        }  
          
         spiral.add(matrix[i][j]);
           
        return moveLeft(matrix, i, j - 1, cornerX, cornerY, spiral);

    }
       public int moveUp(int[][] matrix, int i, int j, int cornerX, int cornerY, ArrayList<Integer> spiral){ 
        if (i < cornerX || j < cornerY){ 
            return j ;
        }  
          
         spiral.add(matrix[i][j]);
           
        return moveUp(matrix, i - 1, j, cornerX, cornerY, spiral);

    } 
    
}