class NestedIterator {
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        begins.push(nestedList.begin());
        ends.push(nestedList.end());
    }

    int next() {
        return (begins.top()++)->getInteger();
    }

    bool hasNext() {
        while(begins.size())
        {
            if(begins.top() == ends.top())
            {
                begins.pop();
                ends.pop();
            }
            else
            {
                auto val = begins.top();
                if(val->isInteger()) return true;
                begins.top()++;
                begins.push(val->getList().begin());
                ends.push(val->getList().end());
            }
        }
        return false;
    }
private:
    stack<vector<NestedInteger>::iterator> begins, ends;
};

/**