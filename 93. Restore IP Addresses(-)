public List<String> restoreIpAddresses(String s) {
    List<String> result = new ArrayList<>();
    restoreIpAddressesCore(result, new StringBuilder(), s, 0);
    return result;
}

private void restoreIpAddressesCore(List<String> result, StringBuilder stringBuilder, String s, int section) {
    // found a valid ip address, add it to the result list
    if (section == 4 && s.length() == 0) {
        result.add(stringBuilder.toString());
        return;
    }

    // wrong path, return
    if (section == 4 || s.length() == 0) {
        return;
    }

    // i from 0 to 2, since there are only 3 digits per section
    for (int i = 0; i < s.length() && i <= 2; i++) {
        // the beginning of the section cannot be 0, unless the section value is 0, i.e. i = 0
        if (i > 0 && s.charAt(0) == '0') {
            break;
        }

        String sectionValue = s.substring(0, i + 1);
        if (Integer.valueOf(sectionValue) <= 255) {
            if (stringBuilder.length() != 0) {
                sectionValue = "." + sectionValue;
            }
            stringBuilder.append(sectionValue);
            restoreIpAddressesCore(result, stringBuilder, s.substring(i + 1), section + 1);
            stringBuilder.delete(stringBuilder.length() - sectionValue.length(), stringBuilder.length()); // remove the sectionValue from stringBuilder
        }
    }
}